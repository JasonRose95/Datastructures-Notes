###################################Hash-Tables######################################

-key/value stores

-can access value given key

-in java = objects, python = dictionaries

-inserting, deleting, searching are constant time

-hash tables are built ontop of arrays
*under the hood, there is an underlying array
*hash function transforms string into index that its mapping to

-can map string to ASCII code then sum integers to one int
*then modulo is used to get a number between 0 and length of arrray - 1

-under the hood, each index maps to a linked list of potentional values

-two keys that map to the same index = collision
*this complicates looking up value for keys
*every node in linked list would point back to original key
**hashmaps on average support constant time, in the worst case they can be O(N) time
 
-powerful hashing function minimize number of collisions

-in interviews hashmaps are generally O(1) time
*unless interviewer specifically mentions edge cases

-hashing functions/hashing keys = constant time operation

-worse case = each value is its only long linked list
*we would need resizing(if underlying array doesnt have enough space)

-we could implement a hashtable that resizes itself
*if under the hood array runs out of room it could copy and double its size
*all keys could go to new hashing function with new array size
*key value pairs would be placed at different positions in new array

-a big array could resize past a certain threshhold to make itself smaller

-resizing = a way to avoid collision

-resizing would occur very infrequently allowing us to maintain constant time insertion

-init => O(N)ST

-keys don't have to be strings, need values that can be passed into hashing function
and turned into integers

-some built in hashtables allow other datatypes other than strings and its for values

####################################################################################